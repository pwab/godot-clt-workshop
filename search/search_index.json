{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Spieleprogrammierung mit der Godot Engine - Ein Workshop bei den Chemnitzer Linux-Tagen","text":""},{"location":"#intro","title":"Intro","text":"<p>Ein freundliches Hallo</p> <p>Herzlich willkommen!</p> <p>Diese Seite dient der Begleitung von Workshops zum Thema Godot. Du kannst sie aber auch durcharbeiten, ohne einen Workshop zu besuchen. Ich w\u00fcnsche dir jedenfalls viel Spa\u00df bei der Lekt\u00fcre. Hier und da fehlt sicherlich noch etwas, aber lass dich davon nicht aufhalten. Bei Fragen kannst du einfach bei GitHub einen Diskussionsbeitrag erstellen!</p> <p>Viele Gr\u00fc\u00dfe - Philipp</p> <p></p> <p>Workshop bei den CLT2023</p> <p>Der n\u00e4chste Workshop \"Einstieg in die Spieleprogrammierung mit der Godot Engine\" findet bei den Chemnitzer Linux-Tagen 2023 statt!</p> <pre><code>Raum: K1\nStart: Sonntag 14:00\nDauer: 03:00h\n</code></pre> <p>Godot ist eine freie Spiel-Engine, mit der sich auf einfache Weise Ideen f\u00fcr Spiele und Apps auf PC, Smartphone oder im Webbrowser umsetzen lassen. Der Einstieg ist \u00fcberraschend einfach und viele Sachen sind schnell gemacht. Im Workshop wird die Godot Engine vorgestellt. Unter Anleitung werden Spielelemente wie Animationen, Sound und Kollisionen f\u00fcr ein kleines 2D-Spiel Schritt f\u00fcr Schritt eingebaut und Fallstricke dabei erkl\u00e4rt. Am Ende des Workshops sollen die Teilnehmer gesehen haben, wie die Godot Engine aufgebaut ist und wie man damit die einzelnen Grundbausteine eines Spiels nach und nach zusammenf\u00fcgt. Da man in einem solchen Kurs trotz des zeitlichen Umfangs nur an der Oberfl\u00e4che der Spieleentwicklung kratzen kann, gibt es online weiterf\u00fchrendes Kursmaterial, mit dessen Hilfe man sich dann selbstst\u00e4ndig weitere Themen erarbeitet kann.</p>"},{"location":"#voraussetzungen","title":"Voraussetzungen","text":"<p>Der Workshop ist konzipiert f\u00fcr Jugendliche etwa ab der 8. Klasse. Programmierkenntnisse sind nicht notwendig, da im Laufe des Workshops alle Codeteile gezeigt und erl\u00e4utert werden. Der Kurs wird auf Deutsch gehalten, der Code wird allerdings auf Englisch geschrieben, da dies im Programmierbereich \u00fcblich ist. Daf\u00fcr sind jedoch nur grundlegende Sprachkenntnisse notwendig und alle Programmteile werden beim Einf\u00fcgen auf Deutsch erkl\u00e4rt.</p> <p>Eine Teilnahme ist auch f\u00fcr andere Personengruppen (bspw. j\u00fcngere Kinder unter Begleitung eines Erwachsenen oder \u00e4ltere/erfahrenere Jugendliche) m\u00f6glich. Allerdings kann hier nicht auf die speziellen Bed\u00fcrfnisse (bspw. \u00dcber- oder Unterforderung) eingegangen werden - ich werde dennoch mein Bestes versuchen.</p> <p>Die ben\u00f6tigte Software ist f\u00fcr alle g\u00e4ngigen Betriebssysteme verf\u00fcgbar und dank einer Gr\u00f6\u00dfe von knapp 40 MB schnell heruntergeladen. Eine Installation wird in der Regel nicht ben\u00f6tigt. F\u00fcr die Teilnahme am Workshop wird ein PC mit Maus und Tastatur empfohlen, welcher OpenGL 2.1 / OpenGL ES 2.0 kompatible Hardware besitzt - das unterst\u00fctzen heutzutage aber nahezu alle Rechner also keine Sorge. Zur Not gibt es auch einen Webeditor, welcher auf Tablets funktionieren k\u00f6nnte.</p>"},{"location":"#letzte-worte-zur-vorbereitung","title":"Letzte Worte zur Vorbereitung","text":"<p>Also hier noch einmal als Checkliste zusammengefasst, was du zum Live-Workshop vorbereiten solltest:</p> <ul> <li> Bring deinen Laptop und eine Maus mit (Betriebssystem ist egal)</li> <li> Installiere die Godot Engine</li> <li> Lade dir die Assets herunter</li> <li> Lies das Kapitel zur Einf\u00fchrung</li> <li> Optional: Bring einen Gamecontroller mit, der an deinem Laptop funktioniert (bspw. XBox oder PS-Controller)</li> </ul> <p>Und falls der Workshop online stattfindet:</p> <ul> <li> Sitz gem\u00fctlich vor deinem PC/Laptop (Tipp: Zwei Monitore helfen dabei, das Gesehene gleich mit umzusetzen)</li> <li> Halte ein Headset mit Kopfh\u00f6rern und am besten mit Mikrofon bereit (Zur Kommunikation wird es w\u00e4hrend des Workshops einen Textchat geben. Wer ein Mikrofon hat, kann auch dieses f\u00fcr das Stellen von Fragen nutzen. Eine Kamera wird nicht ben\u00f6tigt.)</li> <li> R\u00e4ume deinen Desktop auf, damit dieser nur Dinge zeigt, die \u00f6ffentlich sichtbar sein d\u00fcrfen, da wir eventuell den Bildschirm teilen, um einander zu helfen</li> <li> Installiere die Godot Engine</li> <li> Lade dir die Assets herunter</li> <li> Lies das Kapitel zur Einf\u00fchrung</li> </ul> <p>Im Brandfall: Scheibe nicht einschlagen!</p> <p>Sollte etwas schieflaufen oder solltest du aus irgendwelchen Gr\u00fcnden nicht am Workshop teilnehmen k\u00f6nnen: Keine Panik!</p> <p>Auf dieser Webseite findest du alle Inhalte und Schritt-f\u00fcr-Schritt-Anleitungen zu den Themen des Workshops. Du kannst also jederzeit dir die Sachen selbstst\u00e4ndig anschauen und den Workshop so nachholen.</p>"},{"location":"#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>Webseite der Chemnitzer Linux-Tage</li> <li>Offizielle Webseite der Godot Engine (Englisch)</li> <li>Source Code dieser Kurswebseite</li> </ul>"},{"location":"#lizenz","title":"Lizenz","text":"<p>Der gesamte Workshopinhalt (Text, Bilder und Code) steht unter der CC0-1.0 Lizenz. Er ist also frei nutzbar, kann ohne zu fragen kopiert, ver\u00e4ndert und weitergegeben werden.</p> <p>Auch die Assets fallen alle unter die CC0-1.0 Lizenz. Die jeweiligen Urheber wurden dennoch in den Asset-Unterordnern in einer separaten Datei genannt und die entsprechende Quelle wurde mit angegeben. Mein Dank gilt diesen freundlichen Menschen \ud83d\udc99.</p> <p>Eine Ausnahme bildet das Godot Logo. Dieses stehet unter der CC-BY-3.0 Lizenz und wurde erstellt von Juan Linietsky, Ariel Manzur and the Godot community.</p>"},{"location":"cheatsheet/","title":"Spickzettel","text":"<p>Die wenigsten kennen alle Sprachstrukturen und Funktionen von GDScript auswendig. Viel mehr baut man sich durch stetige Wiederholung seinen \"Programmiersprachwortschatz\" nach und nach auf. In der Zwischenzeit machen sich Spickzettel (englisch Cheatsheet) ganz gut - so wie in der Schule. (Das Wort \"Cheat\" hei\u00dft \u00fcbersetzt so viel wie Betrug/Schwindel und das kommt auch an anderer Stelle in Spielen vor.)</p> <p>Cheatsheet</p> <p>Erstelle dir selbst einen Spickzettel f\u00fcr die aus deiner Sicht wichtigsten Codestrukturen und Funktionen. Diese kannst du auf ein Blatt Papier schreiben, welches du bei jedem Projekt bereitlegst, damit du schnell mal einen Befehl oder \u00e4hnliches nachschauen kannst.</p>"},{"location":"cheatsheet/#kommentare","title":"Kommentare","text":"<pre><code># Kommentar\n</code></pre>"},{"location":"cheatsheet/#variablen","title":"Variablen","text":"<pre><code>var zahl = 5\nvar zeichenkette = \"Hello\"\nvar feld = [1, 2, 3]\nvar woerterbuch = {\"key\": \"value\", 2: 3}\nvar vektor2d = Vector2(1, 2)\nvar vektor3d = Vector3(1, 2, 3)\nconst KONSTANTE = 3.14\nenum Kategorie {EINS, ZWEI, DREI}\n</code></pre>"},{"location":"cheatsheet/#annotationen","title":"Annotationen","text":"<pre><code>@onready\n@export\n@export_range(0, 100, 1, \"or_greater\", \"or_lesser\")\n@export_group(\"My Properties\")\n</code></pre>"},{"location":"cheatsheet/#funktionen","title":"Funktionen","text":"<pre><code># Funktionsdeklaration\nfunc summenfunktion(wert1, wert2):\nreturn wert1 + wert2\n# Funktionsaufruf\nvar ergebnis = summenfunktion(1,2)\n</code></pre>"},{"location":"cheatsheet/#strukturen","title":"Strukturen","text":"<pre><code>if a &gt; b:\n...\nelif a &lt; b:\n...\nelse:\n...\nmatch s:\n\"A\":\n...\n\"B\":\n...\n\"C\"\":\n...\n</code></pre>"},{"location":"cheatsheet/#schleifen","title":"Schleifen","text":"<pre><code>while a &gt; b:\n...\nfor buchstabe in [\"A\", \"B\", \"C\"]:\n... # A, B, C\nfor i in range(5):\n... # 0, 1, 2, 3, 4\nfor i in range(1, 6):\n... # 1, 2, 3, 4, 5\nfor i in range(2, 12, 2):\n... # 2, 4, 6, 8, 10\n</code></pre>"},{"location":"cheatsheet/#operatoren","title":"Operatoren","text":"<pre><code>+ - * / %\n&lt; &gt; == != &gt;= &lt;=\n!irgendwas\nnot irgendwas\netwas and noch_etwas etwas or etwas_anderes\nis\nin\nas\n</code></pre>"},{"location":"cheatsheet/#typen","title":"Typen","text":"<pre><code>null\nbool\nint\nfloat\nString\nVector2\nVector3\nArray\nDictionary\nColor\nNodePath\n</code></pre>"},{"location":"cheatsheet/#signale","title":"Signale","text":"<pre><code># Im Skript dings.gd\nsignal getroffen(womit, wie_doll)\n# In einer Szene mit einem Dings mit dem Namen Dingsdabums \nfunc _ready():\nvar dingsdabums = get_node('Dingsdabums')\ndingsdabums.connect(\"getroffen\", self, \"_wenn_dings_getroffen\")\nfunc _wenn_dings_getroffen(womit, wie_doll):\nprint(\"Wer war das: \", womit)\nprint(\"Wie sehr tut es weh: \", wie_doll)\n</code></pre>"},{"location":"cheatsheet/#allgemein","title":"Allgemein","text":"<pre><code>pass\nprint\n</code></pre>"},{"location":"cheatsheet/#szenenbaum","title":"Szenenbaum","text":"<pre><code>get_tree().paused = true\nget_tree().reload_current_scene()\nget_tree().change_scene_to_file(\"res://levels/level2.tscn\")\n</code></pre>"},{"location":"cheatsheet/#nodesszenen","title":"Nodes/Szenen","text":"<pre><code>preload\nload\nget_tree().get_root()\nget_node(\"Szene/Dingsdabums\")\n$Dingsdabums\nself\nvar Dings = load(\"res://dings.tscn\")\nvar dingsdabums = Dings.instantiate()\nget_parent().add_child(dingsdabums)\n</code></pre>"},{"location":"cheatsheet/#mainloopnotifications","title":"Mainloop/Notifications","text":"<pre><code>_init()\n_enter_tree()\n_ready()\n_exit_tree()\n_process(delta)\n_physics_process(delta)\n_input(event)\n_unhandled_input(event)\n_draw()\n</code></pre>"},{"location":"cheatsheet/#spezialzeug","title":"Spezialzeug","text":"<pre><code>@tool\n</code></pre>"},{"location":"cheatsheet/#weitere-hilfen","title":"Weitere Hilfen","text":""},{"location":"cheatsheet/#themen-cheatsheets","title":"Themen-Cheatsheets","text":"<ul> <li>Tweening Cheatsheet</li> <li>Stretch Mode</li> </ul>"},{"location":"cheatsheet/#zum-schnellen-nachschlagen","title":"Zum schnellen Nachschlagen","text":"<ul> <li>Offizielle Dokumentation - GDScript Basics</li> <li>GDScript.com - Tutorials</li> <li>GDScript.com - Solutions</li> <li>kidscancode.org - Godot Recipes</li> </ul>"},{"location":"glossary/","title":"Glossar","text":"<p>Hier findest du ein alphabetisch einigerma\u00dfen sortiertes Glossar.</p> <p>Ich werde sp\u00e4ter auch Verlinkungen hinzuf\u00fcgen, zu den Stellen, wo diese Begriffe Verwendung finden oder zu Seiten, auf denen es genauer erkl\u00e4rt ist.</p>"},{"location":"glossary/#abkurzungen","title":"Abk\u00fcrzungen","text":"Abk\u00fcrzung Beschreibung <code>AA</code> Anti-Aliasing (Kantengl\u00e4ttung) <code>AR</code> Augmented Reality <code>FPS</code> Frames Per Second (Bilder pro Sekunde) <code>IO</code> Augmented Reality <code>LAN</code> Local Area Network (Lokales Netzwerk) <code>PBR</code> Physically Based Rendering <code>SFX</code> Soundeffects (Soundeffekte) <code>VR</code> Virtual Reality (Virtuelle Realit\u00e4t)"},{"location":"glossary/#begriffe","title":"Begriffe","text":"<code>AAA</code> Ausgesprochen \"Triple A\", bezeichnet Spiele, die ein sehr hohes Entwicklungsbudget haben, an denen tausende Entwickler in internationalen Teams arbeiten und die in der Regel grafisch sehr aufw\u00e4ndig und/oder inhaltich sehr umfangreich sind. <code>Assets</code> Materialien, umfasst Sprites, Sounds, Schriftarten und alles andere, was man zum Spieleprogrammieren eben so braucht <code>Icons</code> Bilder, die klein und kompakt sind und einen Begriff oder ein Ding auf ganz einfache Weise darstellen. Werden zumeist in Men\u00fcs verwendet, um einer Aktion ein passendes Bild zuzuweisen (bspw. eine Diskette zum Speichern). Werden auch als Symbol f\u00fcr Programme verwendet, welches dann als App-Symbol auf dem Desktop/Smartphone-Homescreen erscheint. <code>Sounds</code> Musik und Soundeffekte <code>Sprites</code> Bilder <code>Spritesheet</code> Zusammenstellung von Einzelbildern in einer Bilddatei <code>Input</code> Eingabe <code>Output</code> Ausgabe <code>Left</code> Links. Richtungsangabe. Findet bspw. Verwendung bei <code>Vector2D.LEFT</code> <code>Right</code> Rechts <code>Up</code> Hoch <code>Down</code> Runter <code>Top</code> Oben <code>Down</code> Unten <code>Collision</code> Kollision, spielt eine gro\u00dfe Rolle beim Einsatz von Physik <code>Delta</code> Differenz, oftmals benutzt als Deltatime (Zeitdifferenz) zwischen zwei Frames, wird ben\u00f6tigt, um Spiele unabh\u00e4ngig von der Leistung der Hardware zu programmieren <code>Frame</code> Einzelbild eines Spiels, pro Sekunde werden in der Regel 30 bis 120 FPS erreicht, darunter wirkt das Spiel \"ruckelig\""},{"location":"help/","title":"Hilfe","text":"<p>Falls du Hilfe brauchst, gibt es viele verschiedene M\u00f6glichkeiten und Kan\u00e4le. Ich empfehle zuerst immer die offizielle Dokumentation zu lesen. Und mit \"lesen\" meine ich tats\u00e4chlich den Inhalt Wort f\u00fcr Wort zu lesen und zu versuchen, die oftmals sehr komplexen Zusammenh\u00e4nge zu verstehen. Die Dokumentation und insbesondere die API-Dokumentation ist der wohl wichtigste Anlaufpunkt bei Fragen. Diese kannst du auch direkt in der Godot Engine \u00f6ffnen, wenn du im Code die Hilfe f\u00fcr einen Befehl oder ein Node aufrufst.</p> <p>Englisch \ud83c\uddec\ud83c\udde7 \ud83c\uddfa\ud83c\uddf8</p> <p>Die allermeisten Links f\u00fchren auf englische Seiten. Das mag am Anfang etwas schwierig sein, aber du wirst um das Lesen von englischen Tutorials oder das Anschauen von englischsprachigen Videos irgendwann nicht herumkommen. Nimm dir einfach immer viel Zeit und \u00fcbersetze die W\u00f6rter und S\u00e4tze Schritt f\u00fcr Schritt. Mit der Zeit wird dein Englisch immer besser und du kannst dich auch in den offiziellen Kan\u00e4len melden und Hilfe bekommen.</p> <p>Texte kannst du oftmals ganz schnell mittels DeepL \u00fcbersetzen. Falls du selbst eine Frage formulieren willst, dir aber bei der Grammatik oder Rechtschreibung nicht sicher bist, kann ich LanguageTool empfehlen.</p> <p>Ich habe deutsche Links direkt mit einer \ud83c\udde9\ud83c\uddea-Flagge markiert.</p>"},{"location":"help/#offizielle-seiten","title":"Offizielle Seiten","text":"<ul> <li>Godotengine.org Webseite</li> <li>Offizielle News</li> <li>Asset Library</li> </ul>"},{"location":"help/#offizielle-hilfeseiten","title":"Offizielle Hilfeseiten","text":"<ul> <li>Offizielle Dokumentation der Godot Engine</li> <li>Offizielle Dokumentation der Godot Engine \ud83c\udde9\ud83c\uddea</li> <li>Hilfekan\u00e4le f\u00fcr Fragen</li> <li>User Groups</li> </ul>"},{"location":"help/#deutsche-godot-community","title":"Deutsche Godot Community \ud83c\udde9\ud83c\uddea","text":"<ul> <li>Webseite</li> <li>Discord</li> <li>Reddit</li> <li>Facebook</li> </ul>"},{"location":"help/#tutorials","title":"Tutorials","text":"<ul> <li>KidsCanCode - Godot Recipes</li> <li>GDQuest - Godot Tutorials</li> <li>GDScript.com</li> <li>Offizielle Dokumentation - Tutorial Sammlung</li> <li>Reddit - Tutorial Sammlung</li> </ul>"},{"location":"help/#empfohlener-lesestoff-auerhalb-von-godot","title":"Empfohlener Lesestoff au\u00dferhalb von Godot","text":"<ul> <li>GDQuest - Getting Started</li> <li>Robert Nystrom - Game Programming Patterns (EN / auch als Buch \ud83c\udde9\ud83c\uddea)</li> </ul>"},{"location":"help/#youtube","title":"Youtube","text":"<ul> <li>Godot Engine</li> <li>GDQuest</li> <li>Emilio</li> <li>HeartBeast</li> <li>Gamesfromscratch</li> <li>KidsCanCode</li> <li>Let's GameDev \ud83c\udde9\ud83c\uddea</li> </ul>"},{"location":"help/#entwicklerlogs","title":"Entwicklerlogs","text":"<ul> <li>Juan Linietsky</li> <li>Andrea Catania</li> <li>Bastiaan Olij</li> </ul>"},{"location":"help/#noch-viel-mehr-zeug","title":"Noch viel mehr Zeug","text":"<ul> <li>GitHub - Awesome Godot</li> <li>Godot Shaders</li> <li>Steincodes</li> <li>RandomMomentania</li> </ul>"},{"location":"bonuslevel/next/","title":"Wie geht es weiter?","text":""},{"location":"bonuslevel/clones/","title":"Klone bekannter Spiele","text":"Die Grundidee hinter Klonen (engl. clones): Nimm dir ein Spiel, dass du gut kennst und versuche, es nachzubauen. Dabei lernst du sehr viel, ohne dir vorher Gedanken dar\u00fcber machen zu m\u00fcssen, wie das Spiel aufgebaut sein soll. <p>Templates von GDQuest</p> <p>Bei GDQuest auf GitHub gibt es viele Vorlagen (Templates) f\u00fcr bestimmte Spieltypen. Daran kannst du dich orientieren oder diese auch einfach als Grundlage f\u00fcr dein Spiel nehmen. Beispielsweise bezeichnet man Spiele, die so sind wie \"Super Mario\" als Platformer und dazu findest du dort eine Vorlage.</p>"},{"location":"bonuslevel/clones/among-us/","title":"Among Us","text":"<p>Baustelle</p> <p>Sorry, hier steht noch nichts weiter. Ich arbeite daran \u26cf</p> <p>Links zu Beispielprojekten:</p> <ul> <li>GitHub - indieverso/thealien</li> <li>GitHub - bitmammoth/AmongUsRemake</li> <li>GitHub - craftablescience/Among-Us-Godot-Vision-Mechanic</li> </ul>"},{"location":"bonuslevel/clones/angry-birds/","title":"Angry Birds","text":"<p>Baustelle</p> <p>Sorry, hier steht noch nichts weiter. Ich arbeite daran \u26cf</p> <p>Links zu Beispielprojekten:</p> <ul> <li>GitHub - crystal-bit/angry-aliens</li> <li>GitHub - Cevantime/BirdsFurry</li> <li>GitHub - Dev-Zisko/AngryBirdsGodot</li> <li>GitHub - bsu-cs315/Project_1</li> </ul>"},{"location":"bonuslevel/clones/doodle-jump/","title":"Doodle Jump","text":"<p>Baustelle</p> <p>Sorry, hier steht noch nichts weiter. Ich arbeite daran \u26cf</p> <p>Links zu Beispielprojekten:</p> <ul> <li>GitHub - notonlyming/Doodle_jump</li> <li>GitHub - not-reuty/jumpy</li> <li>GitHub - JvrMoises/Doodle-jump</li> <li>GitHub - Rymfire/Doodle-Jump</li> <li>GitHub - Zepelino/Doodle-Jump-copy</li> <li>GitHub - stevejaxon/beicat</li> </ul>"},{"location":"bonuslevel/clones/flappy-bird/","title":"Flappy Bird","text":"<p>Baustelle</p> <p>Sorry, hier steht noch nichts weiter. Ich arbeite daran \u26cf</p> <p>Links zu Beispielprojekten:</p> <ul> <li>GitHub - smmalmansoori/flappy-quack</li> <li>GitHub - 7sDream/pixel-bird-jump</li> <li>GitHub - kazeraniman/FlappyBirdClone</li> <li>GitHub - shivmsit/FlappyBird</li> <li>GitHub - edytapawlak/CrabbyBird</li> <li>GitHub - bg21/flappy_bird_godot</li> </ul>"},{"location":"bonuslevel/clones/minecraft/","title":"Minecraft","text":"<p>Baustelle</p> <p>Sorry, hier steht noch nichts weiter. Ich arbeite daran \u26cf</p> <p>Links zu Beispielprojekten:</p> <ul> <li>GitHub - toger5/Godot-Voxel-Game-MineCraftClone</li> <li>GitHub - MiniDigger/Godotcraft</li> <li>GitHub - rayxuln/Buildestroy</li> <li>GitHub - SindreStokke/Basic-Minecraft-Lookalike</li> <li>GitHub - olihewi/blocky-godot</li> <li>GitHub - BlenderIsaac/Godot-Paper-Minecraft</li> <li>GitHub - VictorRandall/Minecraft_Clone</li> </ul>"},{"location":"bonuslevel/clones/pong/","title":"Pong","text":"<p>Baustelle</p> <p>Sorry, hier steht noch nichts weiter. Ich arbeite daran \u26cf</p> <p>Links zu Beispielprojekten:</p> <ul> <li>GitHub - williamd1k0/godot-pong-ex</li> <li>GitHub - Tornadowarnung/Pong</li> <li>GitHub - Windows87/godot-pong-ai</li> <li>GitHub - JonathanDC64/GodotPong</li> <li>GitHub - ethan-moyer/GodotPong</li> </ul>"},{"location":"bonuslevel/clones/super-mario/","title":"Super Mario","text":"<p>Baustelle</p> <p>Sorry, hier steht noch nichts weiter. Ich arbeite daran \u26cf</p> <p>Links zu Beispielprojekten:</p> <ul> <li>GitHub - Oviglo/SuperMarioGodot</li> <li>GitHub - YanjieHe/Platformer</li> <li>GitHub - aindriu80/GotdotMarioClone</li> <li>GitHub - luase/godotMarioClone</li> </ul>"},{"location":"bonuslevel/docs/","title":"Dodge the Creeps - Spielidee","text":"<p>Dodge the Creeps ist das offizielle Einsteigerprojekt f\u00fcr Godot. Damit kannst du den Editor kennenlernen und dich St\u00fcck f\u00fcr St\u00fcck mit den einzelnen Elementen eines Spiels vertraut machen. Die Anleitung gibt es komplett auf Deutsch und Englisch und du kannst dir das fertige Spiel auch als fertige Demo aus der Asset Library runterladen.</p> <p>Jedes Spiel braucht eine Idee und die von Dodge the Creeps ist schnell erz\u00e4hlt: Du steuerst einen Charakter mit den Pfeiltasten und musst den Gegnern ausweichen. Je l\u00e4nger du durchh\u00e4ltst, desto mehr Punkte erreichst du. Ende.</p> <p>Klingt nach Spa\u00df? Vielleicht nicht unbedingt. Aber daf\u00fcr lernst du bei der Erstellung viele Dinge \u00fcber die Anzeige, Animationen und das Skripten von Spielen. Das wird dir sp\u00e4ter viel helfen und man muss halt einfach klein anfangen. \ud83e\udd37\u200d\u2642\ufe0f</p> <p>Das Tutorial zur Erstellung findest du auf Deutsch. Es ist kurz und knapp beschrieben und wurde schon sehr oft \u00fcberarbeitet und hinsichtlich der Details in den Erl\u00e4uterungen angepasst. F\u00fcr Anf\u00e4nger also ideal! Lies es dir ganz in Ruhe durch, lade die Assets herunter und f\u00fchre dann die einzelnen Schritte selbst aus. Am besten tippst du auch den Code ab (nicht kopieren!), dann lernst du auch, wie es sich anf\u00fchlt ein Skript nach und nach aufzubauen. Ich kann nur jedem Einsteiger empfehlen, einmal ein Dodge the Creeps selbst zu bauen \ud83d\ude09</p> <p>Hier geht's zum Tutorial: Das erste Spiel - Deutsche Godot Dokumentation</p>"},{"location":"bonuslevel/docs/dodge-the-creeps/","title":"Let's play","text":"<p>Und so sieht es dann aus, wenn es f\u00fcr den Browser exportiert wurde:</p> <p></p> <p>Wie geht das?</p> <p>Um ein Spiel in eine Webseite einzubauen, braucht es verschiedene Dinge:</p> <ol> <li>Ein Spiel (bspw. die Demo von Dodge the Creeps)</li> <li>In Godot installierte Export Templates (gibt es hier)</li> <li>Ein HTML5 Export des Spiels (muss man einrichten)</li> <li>Ein Hoster f\u00fcr den Upload der Dateien (in diesem Fall GitHub)</li> <li>Einen Webseitenprovider der die Dateien bereitstellt (in diesem Fall GitHub Pages)</li> <li>Eine eigene Webseite um den Link zum Spiel als iframe einzubetten (diese Workshopseite hier)</li> </ol> <p>Dann kann man die meisten Spiele problemlos f\u00fcr den Webbrowser exportieren und irgendwo in eine Seite einbetten. Viele Leute nutzen daf\u00fcr itch.io, weil es eine einfache M\u00f6glichkeit bietet, sein Spiel anderen Menschen zu zeigen, Feedback zu bekommen oder sogar etwas Geld zu verdienen. Schau dich dort mal einfach um und gib beispielsweise Godot in die Suchleiste ein. Da gibt es viel zu sehen!</p>"},{"location":"bonuslevel/mods/","title":"Modden von Beispielen","text":"<p>Mods sind ein wunderbar einfacher Einstieg in die Spielentwicklung. Hierf\u00fcr nehmen wir uns ein bereits fertiges Spiel und nehmen \u00c4nderungen (engl. Modifications = Mods) daran vor. Du kannst es dabei nach Belieben anpassen beispielsweise kannst du Grafiken austauschen, Sounds ver\u00e4ndern, mehr Gegner hinzuf\u00fcgen und sogar Cheats lassen sich einbauen. Das Beste dabei ist, dass du gleichzeitig den Editor besser kennenlernst und verstehst, wie manche Dinge so funktionieren.</p> <p>Am besten bleiben wir einfach bei der <code>2D Platformer</code> Demo. Diese l\u00e4sst sich wunderbar anpassen, da viele Elemente direkt im Editor ver\u00e4ndert werden k\u00f6nnen, ohne dass man dabei ein Skript anpassen muss.</p> <p>Baustelle</p> <p>Sorry, ab hier fehlt noch einiges. Ich arbeite daran \u26cf</p>"},{"location":"bonuslevel/mods/#position-des-spielers-verandern","title":"Position des Spielers ver\u00e4ndern","text":"<p>-</p>"},{"location":"bonuslevel/mods/#die-map-anpassen","title":"Die Map anpassen","text":"<p>-</p>"},{"location":"bonuslevel/mods/#mehr-gegner","title":"Mehr Gegner","text":"<p>-</p>"},{"location":"bonuslevel/mods/#mehr-kugeln-abfeuern","title":"Mehr Kugeln abfeuern","text":"<p>-</p>"},{"location":"introduction/","title":"Willkommen","text":"<p>Hallo und herzlich willkommen zu diesem kleinen Workshop zur Godot Engine. Hier m\u00f6chte ich dir einen Einblick in die Spieleprogrammierung geben und wie du mit einer freien Engine schnell von einer Idee zu einem spielbaren Ergebnis kommst.</p> <p>Der Weg zum fertigen Spiel ist lang und steinig. Viele Themen m\u00fcssen wir auf sp\u00e4ter verschieben. Manche Sachen erscheinen zu Beginn super schwierig, aber sobald du verstanden hast, was hinter den Kulissen passiert, wirst du sehen, dass es viel leichter ist, als es aussieht. Damit wir uns auf die Grundlagen konzentrieren k\u00f6nnen und du aber die Themen, die dich interessieren, trotzdem mal anschauen kannst, habe ich f\u00fcr die - meiner Meinung nach - wichtigsten Punkte extra Seiten angelegt. Dort versuche ich kurz und knapp zu erkl\u00e4ren, was du mit Godot erreichen kannst und was du dir daf\u00fcr anschauen k\u00f6nntest.</p> <p>Der Live-Workshop ist inhaltlich in zwei Teile geteilt: Zun\u00e4chst erstellen wir ein kleines Hello-World-Programm und entdecken dabei gemeinsam die Elemente des Godot Editors. Es folgt eine kurze Verschnaufpause. Im zweiten Teil werden wir beginnen ein kleines 2D-Minispiel zu erstellen. Zum Ende des Kurses werden wir deine noch offenen Fragen besprechen.</p>"},{"location":"introduction/#levelaufbau","title":"Levelaufbau","text":"<p>Der Kurs ist in Level unterteilt. Mit Abschluss eines jeden Levels hast du einen weiteren, kleinen Schritt in Richtung Spielprogrammierung getan.</p> <p>Aufbau des Kurses</p> <ul> <li>Einleitung (&lt;-- Du bist hier)</li> <li>Level 1: Erste Schritte</li> <li>Level 2: Von der Spielidee zum Entwurf</li> <li>Level 3: Minigame I</li> <li>Level 4: Den Editor n\u00e4her kennenlernen</li> <li>Level 5: Minigame II</li> <li>Bonuslevel</li> <li>Themengebiete</li> <li>Spickzettel</li> <li>Hilfe</li> <li>Glossar</li> </ul>"},{"location":"introduction/#wie-man-den-kurs-allein-durcharbeitet","title":"Wie man den Kurs allein durcharbeitet","text":"<p>Die Kurswebseite ist als Begleitmaterial f\u00fcr meine Workshops konzipiert. Da ich aber versucht habe, alles verst\u00e4ndlich aufzuschreiben, k\u00f6nntest du die Kursinhalte auch selbstst\u00e4ndig durcharbeiten. Hierf\u00fcr gebe ich dir gern ein paar wichtige Tipps an die Hand:</p> <ul> <li>Mach \u00f6fter eine Pause!</li> <li>Wenn etwas kompliziert und nicht gleich verst\u00e4ndlich ist, schlaf eine Nacht dar\u00fcber (oftmals hilft auch eine Runde Sport oder Duschen - so seltsam es klingen mag).</li> <li>Bei Codebeispielen solltest du immer sehr genau auf die Zeilenangaben achten (diese findest du bei einem Codeblock links in der Leiste).</li> <li>Code zu schreiben lernt man zu Beginn am besten wie bei einem Diktat in der Schule: Tippe den Code immer ab und verwende kein Copy&amp;Paste.</li> <li>Bei Fehlern und rot markierten Codezeilen immer erstmal tief durchatmen und die Fehlermeldung mehrmals lesen. Wenn gar nichts geht, kann man ein Codebeispiel auch mal direkt kopieren - viel zu h\u00e4ufig hat sich an einer Stelle ein Tippfehler versteckt.</li> </ul>"},{"location":"introduction/#eine-sache-noch","title":"Eine Sache noch","text":"<p>Ich bin nicht unfehlbar und somit sind es meine Texte auch nicht. Es kann immer mal wieder vorkommen, dass du eine Stelle im Text findest, die dir komisch vorkommt oder welche schlicht falsch bzw. veraltet ist. Auch wirst du vielleicht hin und wieder nicht meine Meinung teilen (bspw. wenn ich einsch\u00e4tze, ob ein Thema schwierig oder einfach zu verstehen ist).</p> <p>Lass dich von all dem nicht irritieren und bei Fragen, kannst du einen Diskussionsbeitrag im GitHub Repository er\u00f6ffnen. Falls du gar nicht mit dem Workshop klarkommst, ist das auch okay. Es gibt genug Alternativen, die du dir dann ansehen kannst.</p>"},{"location":"introduction/#lets-play","title":"Let's play!","text":"<p>So genug der vielen Worte: Lass uns loslegen! </p>"},{"location":"introduction/01_pronounce/","title":"Aussprache","text":"<p>Zitat von einfach jedem</p> <p>\u00c4hm wie spricht man \"Godot\" eigentlich aus?</p> <p>Diese Frage habe ich schon sehr oft geh\u00f6rt oder gelesen. Insbesondere unter YouTubevideos findet man \u00f6fter hei\u00dfe Diskussionen dar\u00fcber. Die Antwort ist einfacher als man denkt: Es ist deine Sache, wie du \"Godot\" aussprichst! Es ist eine freie und offene Spieleengine und du kannst entscheiden, was du damit machst. Somit kannst du auch entscheiden, wie du es aussprechen willst. Das hat Juan Linietsky - auch reduz genannt - einmal in einem Interview klargestellt. Und er ist neben Ariel Manzur der Begr\u00fcnder und Hauptentwickler von Godot.</p> <p>Drei Beispiele, wie man es aussprechen kann:</p> <ul> <li>GOH-DOH ... Diese Variante wird am h\u00e4ufigsten verwendet und entspricht der franz\u00f6sischen Aussprache. Sie wurde vor allem durch Nathan von GDQuest - ein bekannter Godot-YouTuber - verbreitet.</li> <li>GO-DOTT ... Diese Variante mit dem betonten T am Ende entspricht der Aussprache von reduz, welcher in Argentinien lebt.</li> <li>JO-DOU ... Das G zu Beginn ausgesprochen wie der Name Joe und der Rest wie das englische Dough (wie in Donut). </li> </ul> <p>Mach dir also keine Gedanken dar\u00fcber. Sprich es aus wie du denkst \ud83e\udd37\u200d\u2642\ufe0f. Frei nach dem Motto:</p> <p> (Bildquelle: u/meloonicscorp, 11.11.2020, https://www.reddit.com/r/godot/comments/jsc8qm/for_the_last_time/)</p>"},{"location":"introduction/02_godot-faq/","title":"Fragen zu Godot","text":"<p>Es geht noch nicht mal richtig los und schon gibt es Fragen \u00fcber Fragen. Das ist ein typisches Bild in jedem Workshop und alle diese \"Bevor-wir-loslegen-m\u00f6chte-ich-gern-noch-etwas-wissen\"-Fragen haben ihre Berechtigung. Deshalb m\u00f6chte ich an dieser Stelle einen \u00dcberblick zur Godot-Engine und zu den h\u00e4ufigsten Startfragen ein paar erste Antworten geben.</p> <p>Wie immer gilt: Nichts ist in Stein gemei\u00dfelt. Videos von YouTubern sind manchmal schon etwas \u00e4lter und einige Antworten stimmen einfach nicht mehr. Die Godot Engine entwickelt sich stetig und sehr schnell weiter - da komme auch ich an der einen oder anderen Stelle nicht mehr hinterher. Lass dich also durch Unstimmigkeiten nicht aus dem Konzept bringen.</p>"},{"location":"introduction/02_godot-faq/#was-ist-die-godot-gameengine","title":"Was ist die Godot Gameengine?","text":"<p>Puh! So eine einfache aber irgendwie doch recht schwierig zu beantwortende Frage. Dank der Wikipedia haben wir gute Artikel, was eine Spieleengine und was ein Framework ist und was integrierte Entwicklungsumgebungen damit zu tun haben.</p> <p>Ich versuche es mal auf einfache Weise: Godot ist eine freie Software - sie ist quelloffen und kostenlos nutzbar. Die Godot Gameengine ist eine Spiele-Engine. Damit lassen sich Spiele f\u00fcr den Computer, das Smartphone, f\u00fcr Webseiten oder sogar Konsolen erstellen. Die Werkzeuge von Godot unterst\u00fctzen den Spieldesigner bei allen Elementen, die ein Spiel ben\u00f6tigt. Dazu z\u00e4hlen beispielsweise 2D- oder 3D-Grafik, Soundeffekte und Hintergrundmusik, die Steuerung mit Tastatur und Controller oder auch komplexe Sachen wie KI-Gegner und Multiplayer.</p> <p>Jean von Linux Guides hat sich bei den Chemnitzer Linux-Tagen 2021 etwas mehr M\u00fche als ich jetzt gegeben, um Godot vorzustellen. Schaut euch doch einfach das Video an - die Folien sowie die Fragen mit den Antworten gibt es auf den Seiten der CLT 2021. </p>"},{"location":"introduction/02_godot-faq/#was-kann-man-damit-alles-machen","title":"Was kann man damit alles machen?","text":"<p>Die Community der Godot Engine sammelt jedes Jahr Videos zusammen, welche die vielen Spiele und Programme zeigen, die mit der Engine erstellt wurden. Diese Showreels gibt es f\u00fcr verschiedene Kategorien bspw. Desktop Games, Mobile Games oder auch f\u00fcr Apps. Schau dir am besten einmal die neuesten Videos an, dann bekommst du einen guten \u00dcberblick, was andere Leute so mit der Godot Engine machen:</p> <ul> <li>Godot Engine - Desktop/Console - 2022 Showreel </li> <li>Godot Engine - Mobile - 2022 Showreel</li> <li>Godot Engine - Apps &amp; Tools - 2022 Showreel</li> </ul> <p>Weitere Showreels: Godot Engine Games Showcase (2019 - 2021)</p> <p>Die aktuellsten Showreels findest du immer unter Showcase auf der offiziellen Webseite der Godot Gameengine.</p>"},{"location":"introduction/02_godot-faq/#welche-spiele-wurden-damit-schon-gemacht","title":"Welche Spiele wurden damit schon gemacht?","text":"<p>Die meisten kommen zum Thema Spieleentwicklung \u00fcber folgenden Gedanken: \"Wow! Dieses Spiel ist wirklich toll. Ich m\u00f6chte auch solche Spiele bauen k\u00f6nnen!\". So versuchen viele herauszufinden, womit denn das Lieblingsspiel programmiert wurde und oftmals findet man entweder keine genaue Antwort oder es wurden spezielle Engines verwendet, welche man nicht einfach so im Internet findet. Aber vielleicht gibt es ja \u00e4hnliche Spiele, die mit Godot gebaut wurden? Was wurde denn \u00fcberhaupt schon mit Godot ver\u00f6ffentlicht?</p> <p>Antworten zu diesen Fragen findet man nur schwer in den Showreels, da diese oftmals einfach nur Entwicklungsst\u00e4nde zeigen oder zumindest keine ver\u00f6ffentlichten Spiele. Daf\u00fcr empfehle ich drei andere Anlaufstellen:</p> <ul> <li>Offizielle Godot Showcases - Auf den Unterseiten stellen Entwickler ein Spiel vor und beschreiben, wie Godot ihnen geholfen hat, es zu verwirklichen.</li> <li>itch.io \"Made with Godot\" - Itch.io ist eine sehr gro\u00dfe Plattform f\u00fcr sogenannte Indie-Spiele. Hier gibt es auch eine extra Kategorie f\u00fcr Godot-Spiele.</li> <li>Steam Kurator \"Is it made with Godot\" - Die wohl bekannteste Plattform f\u00fcr Desktopgames \"Steam\" beinhaltet ebenfalls viele Godotspiele. Diese werden auf der Kuratorenseite gesammelt und sind somit besser auffindbar, als durch die Steamsuche.</li> </ul>"},{"location":"introduction/02_godot-faq/#godot-vs-unity-vs-unreal-vs-xyz","title":"Godot vs Unity vs Unreal vs XYZ?","text":"<p>Hier wird es jetzt kompliziert. Man kann aber zun\u00e4chst folgende klare Aussagen treffen:</p> <ul> <li>Es gibt keine allerbeste Engine! Jede hat ihre Vorz\u00fcge und auch Probleme. Am besten probiert man alle Engines aus und findet dann das richtige Tool nach Gef\u00fchl. Wichtig ist immer, dass man nicht zu fr\u00fch aufgibt und die Schuld auf die Software schiebt, wenn etwas nicht klappt. Aller Anfang ist nunmal schwer.</li> <li>Godot ist freie Software (100% kostenlos und quelloffen). Kommerzielle Engines wie Unity und Unreal kosten ab einem bestimmten Punkt Geld und deren Code ist teilweise oder g\u00e4nzlich nicht verf\u00fcgbar.</li> </ul> <p>Eine der ersten Anhaltspunkte, ob eine Engine gut oder weniger gut ist, sind Empfehlungen von anderen. Eine Empfehlung f\u00fcr Godot hast du bereits (von mir ). Aber was sagen andere? Je nach gew\u00fcnschter Ausrichtung f\u00e4llt die Antwort unterschiedlich aus, aber Slant ist eine Seite, auf der solche Empfehlungen gesammelt werden und man eine nette \u00dcbersicht bekommt, welche Software am meisten empfohlen wird:</p> <ul> <li>What are the best game engines?</li> <li>What are the best 2D game engines?</li> <li>What are the best 3D game engines?</li> <li>What are the best free 2D game engines?</li> <li>What are the best 2D game engines for Android?</li> <li>What are the best 2D game engines for low end machines/laptops?</li> <li>What are the best game engines for making an RPG?</li> <li>What are the best game engines for point &amp; click adventure games?</li> <li>Bei Alternativeto.net ist Godot ebenfalls weit vorn platziert</li> </ul> <p>Es gibt auch viele Videos, die diese Frage etwas mehr im Detail thematisieren. Auch hier muss man schauen, dass man nicht allzu alte Videos anguckt, denn alle Spielengines entwickeln sich stetig weiter:</p> <ul> <li>Gamesfromscratch - Unity vs Unreal vs Godot -- Getting Started</li> <li>GDQuest - Unity VS Godot: How Do They Compare?</li> <li>GDQuest - Godot VS Game Maker: How Do They Compare?</li> <li>Gamesfromscratch - Why Godot Over Unity or Unreal Engine?</li> </ul>"},{"location":"introduction/02_godot-faq/#ist-godot-eine-gute-wahl-fur-einen-absoluten-anfanger-wie-mich","title":"Ist Godot eine gute Wahl f\u00fcr einen absoluten Anf\u00e4nger wie mich?","text":"<p>Kurz und knapp: Ja!</p> <ul> <li>Godot ist wunderbar f\u00fcr den Einstieg in die Spieleentwicklung geeignet.</li> <li>Godot ist auch f\u00fcr absolute Programmierneulinge geeinget, denn die Skriptsprache GDScript ist sehr einfach zu erlernen.</li> <li>Es gibt sehr viele Video-Tutorials und Anleitungen f\u00fcr Anf\u00e4nger. Die Dokumentation ist gr\u00f6\u00dftenteils auch auf Deutsch \u00fcbersetzt. (Derzeit gibt es nur wenige B\u00fccher, aber das kann sich ja vielleicht noch \u00e4ndern.)</li> </ul> <p>Hier nochmal ein paar mehr Tipps:</p> <ul> <li>Falls du noch unschl\u00fcssig bist, schau dir die Liste \"What are the best game engines for beginners and non-programmers?\" auf Slant an. Dort findest du noch weitere gute Einsteiger-Engines.</li> <li>Du bist noch in der Grundschule und hast absolut keine Vorstellungen von der Spieleentwicklung? Dann empfehle ich f\u00fcr den Einstieg Scratch - am besten in Kombination mit einem guten Buch \u00fcber die Spieleentwicklung mit Scratch. Auf jeden Fall solltest du dir aber auch jemanden suchen, mit dem du gemeinsam die ersten Schritte wagen kannst. Damit wirst du doppelt so schnell voran kommen und am Ende hat man gleich doppelt so viel Spa\u00df. Versprochen!</li> <li>Du hast etwas Angst vor der Programmierung mittels Text? Das ist v\u00f6llig normal, denn es erscheint zun\u00e4chst ungew\u00f6hnlich, einem Computer mittels Texteditor zu sagen, was er machen soll. An dieser Stelle hast du meiner Meinung nach drei M\u00f6glichkeiten:<ul> <li>Nutze erstmal Engines mit visueller Programmierung wie bspw. Scratch oder GDevelop. Dadurch lernst du auch die Grundbausteine eines Programmtextes (Wenn-Dann, Wiederholung, Objekte/Ereignisse, Bugs etc.) und kannst dieses Wissen sp\u00e4ter nutzen, wenn du dich dann doch bereit f\u00fchlst, Programmtext zu schreiben.</li> <li>Schau dir einmal Python und seine unz\u00e4hligen B\u00fccher und Onlinetutorials an. Es gibt meiner Meinung nach fast keine einfachere Einsteigersprache zur Programmierung, welche top aktuell ist und gleichzeitig in vielen Unternehmen und in der Forschung verwendet wird. Die Sprache ist im \u00dcbrigen GDScript sehr \u00e4hnlich und kann fast ohne Umschreiben in Godot verwendet werden (alternativ gibt es sogar ein Plugin f\u00fcr Python in Godot).</li> <li>Spring einfach ins kalte Wasser! Irgendwann wirst du an den Punkt kommen, an dem du Programmtext aus einem Tutorial abschreiben musst. Wenn du dann eigene \u00c4nderungen daran vornimmst, lernst du die logischen Zusammenh\u00e4nge und merkst, dass es doch am Ende gar nicht so schwer ist. St\u00fcck f\u00fcr St\u00fcck wird es dir leichter fallen. Versprochen!</li> </ul> </li> </ul>"},{"location":"introduction/03_installation/","title":"Installation","text":"<p>Die Godot Engine kannst du auf allen g\u00e4ngigen Betriebssystemen (Linux, Windows, macOS) verwenden. Eine Installation oder Administratorrechte sind in der Regel nicht n\u00f6tig. F\u00fcr den Workshop nutzen wir die aktuelle stabile Version von Godot 4 - das ist zum Zeitpunkt der Chemniter Linux-Tage die Version 4.0.</p> <p>Moment mal - Ist Godot 4 denn schon fertig!? </p> <p>Es stimmt, dass f\u00fcr Godot erst vor kurzem die Version 4.0 erschienen ist. Das ist die neuste Major-Version und diese bringt sehr viele Neuerungen mit sich. Allerdings ist diese Version noch nicht immer stabil. Die Erfahrung mit Godot 3.0 hat gezeigt, dass die Engine mindestens ein bis zwei Minor-Versionen (4.1, 4.2 etc.) ben\u00f6tigt, damit alle krassen Bugs und Probleme behoben sind. Das liegt einfach daran, weil mit einer neuen Version pl\u00f6tzlich sehr viel mehr Leute mit unterschiedlichster Hardware und Ideen im Kopf die Engine ausprobieren. Dabei fallen dann erst die vielen kleinen und gro\u00dfen Probleme auf, die vorher dem Entwicklerteam nicht in dem Ma\u00dfe bekannt waren.</p> <p>Grunds\u00e4tzlich macht man nichts falsch, die Version 3.x weiterhin zu verwenden. Diese wird auch weiter von den Entwicklern gepflegt und bekommt Updates. Man muss auch nicht viel umlernen, wenn man sp\u00e4ter von Version 3 auf Version 4 wechselt. Der Code wird nahezu gleich aussehen und ein Godot-3-Projekt wird automatisch konvertiert, wenn man es mit Godot 4 \u00f6ffnet. Dies hat damals beim Wechsel von Godot 2 auf Godot 3 auch schon gut geklappt.</p> <p>Dennoch musste ich letztendlich f\u00fcr den Workshop eine Entscheidung treffen. Und den Kurs f\u00fcr Godot 3 zu schreiben, obwohl Godot 4 bereits in der Beta ist, erschien mir wenig sinnvoll. Die Gefahr besteht nat\u00fcrlich, dass das Programm dann bei dem einen oder anderen nicht richtig l\u00e4uft oder w\u00e4hrend des Workshops abst\u00fcrzt. Aber ich hoffe, dass das nur selten der Fall sein wird und wir somit gleich mit dem neusten Godot loslegen k\u00f6nnen. \ud83d\ude80</p>"},{"location":"introduction/03_installation/#download-uber-die-offizielle-webseite","title":"Download \u00fcber die offizielle Webseite","text":""},{"location":"introduction/03_installation/#plattformauswahl","title":"Plattformauswahl","text":"<p>Gehe auf die offizielle Downloadseite. Diese w\u00e4hlt automatisch die passende Plattform - also den Download f\u00fcr dein Betriebssystem aus und leitet dich auf die richtige Webseite weiter.</p> <p></p>"},{"location":"introduction/03_installation/#varianten","title":"Varianten","text":"<p>Von der Godot Engine gibt es zwei Varianten: mit und ohne .NET-Unterst\u00fctzung. Der Unterschied ist, dass die .NET-Variante zus\u00e4tzlich die Programmiersprache C# unterst\u00fctzt. Das ben\u00f6tigen wir f\u00fcr den Kurs nicht. Sp\u00e4ter kann man problemlos zur .NET-Version wechseln, wenn man das mal ausprobieren m\u00f6chte.</p> <p>Wenn du mit einem 32-bit Betriebssystem arbeitest, nimm die 32-bit Version. Ansonsten kannst du problemlos die 64-bit Version verwenden - einen Unterschied gibt es meines Wissens nach nicht.</p>"},{"location":"introduction/03_installation/#download","title":"Download","text":"<p>Klick auf den oberen blauen Button - also den Downloadbutton f\u00fcr die Godot Engine ohne .NET-Unterst\u00fctzung. Der Download sollte nun starten.</p> <p></p>"},{"location":"introduction/03_installation/#keine-installation-notig","title":"Keine Installation n\u00f6tig","text":"<p>Eine Installation ist nicht notwendig, da die Godot Engine einfach so gestartet werden kann (das nennt man portable oder self-contained). Unter Linux muss eventuell noch das Recht zur Ausf\u00fchrung als Applikation gesetzt werden.</p> <p>Du solltest den Editor nun mit einem Doppelklick starten k\u00f6nnen und es sollte nach einer kurzen Ladezeit der Godot Splashscreen erscheinen. \ud83d\udc4d</p>"},{"location":"introduction/03_installation/#installation-uber-andere-wege","title":"Installation \u00fcber andere Wege","text":"<p>Die Installation \u00fcber einen Linux-Paketmanager, Snap oder Flatpack k\u00f6nnte auch funktionieren. Schau dir aber bitte die angebotene Version an, denn viele Pakete sind nicht gepflegt und dementsprechend veraltet. Eine \u00dcbersicht f\u00fcr verf\u00fcgbare Linuxpakete findet sich bei pkgs.org.</p> <p>Godot kann auch \u00fcber Drittanbieter bezogen werden. Dazu z\u00e4hlen aktuell Steam und itch.io. Manchmal gibt es hierbei Einschr\u00e4nkungen oder ein paar Sachen sind anders, aber im Gro\u00dfen und Ganzen unterscheiden sich diese Versionen nicht von der, welche auf der offiziellen Webseite heruntergeladen werden kann.</p> <p></p> <p>Links zu Drittanbietern: Link zu Steam, Link zu itch.io</p>"},{"location":"introduction/03_installation/#webversion","title":"Webversion","text":"<p>Falls es f\u00fcr dein System keine aktuelle Godot-Version gibt oder sich das Programm nicht starten l\u00e4sst, dann versuche es mal mit dem Web-Editor. Mit dem habe ich pers\u00f6nlich nur wenig Erfahrungen gemacht, er soll aber dieselben Funktionen unterst\u00fctzen und eine Bearbeitung von Godot Projekten auch mobil erm\u00f6glichen.</p> <p>Hier ist der Link: https://editor.godotengine.org/</p>"},{"location":"introduction/03_installation/#androidversion","title":"Androidversion","text":"<p>Wer ein gro\u00dfes Tablet hat und dazu noch passend eine Maus und Tastatur, kann Godot seit kurzem auch auf einem Android-Ger\u00e4t als App installieren. Diese Form des Editors ist aktuell noch \u00e4u\u00dferst experimentell und ich w\u00fcrde es f\u00fcr ernsthafte Projekte noch nicht empfehlen - zum Testen und Rumspielen aber sicher nicht verkehrt.</p> <p>F\u00fcr Experimentierfreudige: Godot Editor 4 - App bei Google Play</p>"},{"location":"introduction/04_start-demo/","title":"Eine Demo starten","text":"<p>F\u00fcr einen ersten Test, k\u00f6nnen wir mal eine Demo ausprobieren. Das sind fertige Miniprojekte, welche andere Leute erstellt und online zur Verf\u00fcgung gestellt haben, damit man Sachen einfach mal ausprobieren kann.</p> <p>Starte dazu die Godot Engine. Du solltest nach einer kurzen Ladezeit folgendes Fenster sehen:</p> <p></p> <p>Dies ist die Projektverwaltung. Diese ist zu Beginn nat\u00fcrlich noch leer. Aber das hei\u00dft nicht, dass man sie nicht schnell f\u00fcllen kann. Gerade am Anfang habe ich viele kleine Testprojekte erstellt - ich habe bestimmt schon hundert St\u00fcck davon in meiner Liste. Aber man kann auch auf andere Weise die ersten Erfahrungen machen: mit den Demos.</p> <p>Spracheinstellung</p> <p>Falls die Projektverwaltung auf Englisch angezeigt ist, kannst du sie - und damit das gesamte Programm - oben rechts auf Deutsch umstellen. Das hilft teilweise am Anfang \u00fcberall die richtigen Einstellungen zu finden, aber wenn du mal online nach Hilfe fragst, wirst du immer die englischen Begriffe finden. Ein Umstellen ist auch jederzeit in den Programmeinstellungen m\u00f6glich.</p>"},{"location":"introduction/04_start-demo/#vorlagen-und-demos","title":"Vorlagen und Demos","text":"<p>Eine g\u00e4ngige Herangehensweise als Anf\u00e4nger in der Spieleprogrammierung ist das Lernen an Beispielen. Bei Godot findet man dazu offizielle Demos, welche verschiedene Themen in m\u00f6glichst kompakten Projekten zeigen. Manchmal gibt es dazu etwas wenig Erkl\u00e4rung, aber da muss man einfach Rumprobieren und die Dokumentation lesen. Und wenn alles nichts hilft, dann kann man immer irgendwo um Hilfe bitten.</p>"},{"location":"introduction/04_start-demo/#demo-herunterladen-und-installieren","title":"Demo herunterladen und installieren","text":"<p>Klick in der Projektverwaltung in der Meldung auf <code>Open Asset Library</code> - oder wenn du zuvor auf <code>Cancel</code> geklickt hast - auf den Reiter <code>Asset Library Projects</code>.</p> <p></p> <p>Dort siehst du erstmal nichts.</p> <p></p> <p>Klicke im Filtermen\u00fc am rechten Fensterrand auf <code>Support</code> und w\u00e4hle alle Haken an.</p> <p></p> <p>Nun sollten mehrere Projekte, Templates und Demos angezeigt werden. Scrolle ein wenig, bis du das Template <code>Strafer</code> entdeckst.</p> <p></p> <p>Klicke auf das Symbol bzw. den Namen und es sollte die Beschreibungsseite des Projekts angezeigt werden. Klicke dort auf den Button <code>Download</code>.</p> <p></p> <p>Die Demo wird nun heruntergeladen und muss lokal auf deinem Rechner abgelegt werden. Dazu musst du einen leeren Ordner finden, in welchen du die Dateien ablegen willst (Dies wird \u00fcber eine gelbe Meldung angezeigt).</p> <p></p> <p>Da du im Laufe der Zeit bestimmt meherere Projekte anlegen wirst, empfehle ich dir, an dieser Stelle einen extra Ordner f\u00fcr Godot anzulegen. Klicke dazu auf <code>Browse</code>. Anschlie\u00dfend kannst du im Dateimanager einen Ordner mittels <code>Create Folder</code> anlegen. Vergib einen Namen f\u00fcr dein \u00fcbergeordnetes Verzeichnis (im Beispiel <code>Godot</code>) und klicke OK. Anschlie\u00dfend kannst du den Dialog schlie\u00dfen mit einem Klick auf <code>Select Current Folder</code>.</p> <p></p> <p>Nun klickst du im Fenster neben dem Projektnamen <code>Strafer</code> auf <code>Create Folder</code>. Damit erzeugst du einen eigenen Unterordner <code>Strafer</code> im Ordner <code>Godot</code>. Am Ende sollte es in der Projektverwaltung wie im folgenden Bild aussehen. Achte dabei auf den gr\u00fcnen Haken, der taucht nur auf, wenn der Pfad auf einen leeren Ordner zeigt.</p> <p></p> <p>Nun klickst du auf den Button <code>Install &amp; Edit</code> und der Editor \u00f6ffnet sich mit der Demo.</p> <p></p>"},{"location":"introduction/04_start-demo/#play-und-stop","title":"Play und Stop","text":"<p>Das Sch\u00f6ne an einer Demo ist, dass du jetzt nicht mehr viel tun musst. Klicke einfach oben rechts auf den kleinen Play-Button und das Spiel sollte sich in einem extra Fenster starten und du kannst sofort losspielen.</p> <p></p> <p>In der ausgew\u00e4hlten Demo kann man mit den Pfeiltasten herumlaufen, mit der Leertaste springen und mit STRG kannst du dich hinhocken.</p> <p></p> <p>Die Demo l\u00e4sst sich mit einem Klick auf das Schlie\u00dfen-Kreuz des Spielfensters oder durch den Stop-Button im Editor beenden.</p> <p></p> <p>Und das war es schon. Damit hast du in kurzer Zeit deine erste Demo heruntergeladen, das Spiel gestartet und konntest testen, ob die Godot Engine bei dir grunds\u00e4tzlich funktioniert.</p> <p>Jetzt wird es aber Zeit f\u00fcr das erste eigene Projekt und die erste Zeile Code! Schlie\u00dfe dazu die Demo oben links im Men\u00fc mit einem Klick auf <code>Project</code> und dann <code>Quit to Project List</code>. Godot wird dich fragen, ob du das aktuelle Projekt wirklich schlie\u00dfen m\u00f6chtest. Das kannst du mit <code>Yes</code> best\u00e4tigen - eventuell ge\u00e4nderte Szenen kannst du dabei gern speichern.</p> <p></p>"},{"location":"level1/","title":"Level 1 &gt; Hello Godot","text":"<p>Starte nun mit deinem ersten eigenen Projekt. Es wird kein richtiges Spiel, sondern lediglich ein kleines Programm, dass etwas auf dem Bildschirm ausgibt. In vielen tausend Tutorials und Lehrb\u00fcchern gibt es ein solches Hello World Einstiegsbeispiel, bei dem einfach der Text \"Hallo Welt!\" (im Englischen eben \"Hello World!\") angezeigt werden soll. Warum sollten wir hier eine Ausnahme machen?</p> <p>Lerninhalte</p> <p>In diesem Level wirst du die ersten Grundbegriffe kennenlernen, welche bei der Godot Engine eine zentrale Rolle spielen:</p> <ul> <li>Editor: Docks, Viewport, Playtest Buttons</li> <li>Scene: Nodes, Properties, Signals</li> <li>Skript: GDScript</li> </ul> <p>Nodes in diesem Level:</p> <ul> <li>2D Welt: Node2d, Sprite</li> <li>GUI: Button, Label</li> </ul> <p>GDScript in diesem Level:</p> <ul> <li><code>pass</code></li> <li><code>print()</code></li> <li><code>_ready()</code></li> <li><code>_input(event)</code></li> </ul>"},{"location":"level1/01_first-project/","title":"Erstes Projekt","text":"<p>Starte die Godot Engine. Du solltest nun die Projektverwaltung sehen. Klicke in der rechten Seitenleiste auf den Button <code>New Project</code>.</p> <p></p> <p>Es erscheint ein Dialog zur Erstellung eines neuen Projektes. Ganz oben gibst du einen Namen f\u00fcr dein Projekt ein. Nimm hier bespielsweise \"Hello World\" oder denke dir etwas eigenes aus. Anschlie\u00dfend klickst du in der Zeile darunter auf den Button <code>Browse</code>.</p> <p></p> <p>W\u00e4hle einen Pfad, in dem deine Projekte abgelegt werden sollen (du kannst an dieser Stelle auch einen neuen Ordner anlegen) - bspw. <code>../Dokumente/Godot</code>. Mit einem Klick auf <code>Select current folder</code> gelangst du zur\u00fcck zum Dialog.</p> <p></p> <p>Da du wahrscheinlich f\u00fcr jedes deiner Projekte einen eigenen Unterordner anlegen willst, solltest du nun auf den Button <code>Create Folder</code> klicken. Wenn der gew\u00e4hlte Ordner leer ist, zeigt dir der Dialog nun ein gr\u00fcnes H\u00e4kchen statt einem geleben Ausrufezeichen an.</p> <p></p> <p>Nun findest du eine Auswahl an drei Renderern: Forward+, Mobile und Compatibility. Rechts davon werden diese genauer erl\u00e4utert. W\u00e4hle f\u00fcr dieses kleine Programm am besten <code>Compatibility</code> - das gen\u00fcgt hier v\u00f6llig. Darunter kannst du die <code>Version Control Metadata</code> ausw\u00e4hlen (Git oder None). Belasse es einfach bei der Voreinstellung.</p> <p>Jetzt kannst du auf <code>Create &amp; Edit</code> klicken. Deine Projektdateien werden im gew\u00e4hlten Pfad erzeugt und der Godot Editor startet sich nun und \u00f6ffnet dein soeben erstelltes Projekt.</p> <p></p>"},{"location":"level1/02_first-node/","title":"Erstes Node","text":"<p>Der Godot Editor ist gestartet und hat dein erstes eigenes Projekt ge\u00f6ffnet. Du kannst den Namen deines Projekts oben in der Titelleiste sehen.</p> <p></p> <p>Die erste H\u00fcrde nehmen: Einfach loslegen!</p> <p>Ein leeres Projekt ist vergleichbar mit einem leeren Blatt Papier, wenn man einen Text schreiben oder ein Bild malen will: Man wei\u00df nicht genau, wie man anfangen soll, weil irgendwie kommen die Ideen erst, wenn man schon mittendrin ist. Um in einen solchen \"Fluss\" zu kommen (und das gilt f\u00fcr alle kreativen T\u00e4tigkeiten), gibt es eine einfache Hilfe:</p> <p>Erstelle bei einem neuen Projekt zu Beginn immer etwas ganz Kleines und schaue es dir an, als w\u00e4re dein Projekt damit schon fertig. Du erh\u00e4lst sofort ein Ergebnis - und das mit minimalem Aufwand. Dies motiviert und gibt dir einen Schubs, St\u00fcck f\u00fcr St\u00fcck mehr hinzuzuf\u00fcgen.</p> <p>Das funktioniert in der Godot Engine super, weil du hier schrittweise vorgehen kannst (das nennt man auch iterativ) und du nicht von Anfang bis Ende alles vorher durchdenken musst. </p> <p>Auf der linken Seite findest du oben den <code>Scene-Dock</code>. Dort steht Create Root Node und darunter findest du vier Buttons: 2D Scene, 3D Scene, User Interface und Other Node.</p> <p></p> <p>Klicke auf <code>2D Scene</code>, denn wir wollen ein 2D-Programm erstellen. Nun \u00e4ndert sich der <code>Scene-Dock</code> und es steht dort nur noch <code>Node2D</code>. Weiterhin hat sich in der Mitte des Editors der sogenannte <code>Viewport</code> automatich auf die 2D-Ansicht umgestellt.</p> <p></p> <p>Scene? Node? Was ist das?</p> <p>Diese beiden Begriffe sind zwei der Kernelemente von Godot. Im Detail wirst du sie erst nach und nach verstehen, aber f\u00fcr den Anfang kann man es sich wie folgt vorstellen:</p> <p>Ein Spiel ist wie ein Theaterst\u00fcck: Es gibt eine B\u00fchne und auf dieser gibt es Schauspieler, einen Hintergrund, allerlei Gegenst\u00e4nde und irgendwo sitzt noch ein Orchester f\u00fcr die Musik - diese Grundelemente sind im \u00fcbertragenen Sinne unsere Nodes. Ein solches Theaterst\u00fcck ist in Szenen unterteilt, bei denen die B\u00fchne jeweils anders aufgebaut ist: ein anderer Hintergrund, andere Schauspieler und Gegenst\u00e4nde (welche aber auch wiederverwendet werden k\u00f6nnen). Unsere Scenes bestehen also aus verschiedenen Nodes und diese ergeben ein Gesamtbild, welches das Spiel ausmacht.</p> <p>Die Szene hei\u00dft aktuell noch <code>Node2D</code>. Da es sich um die Hauptszene in deinem Programm handelt, kannst du sie bspw. umbenennen in <code>Main</code>. Klicke dazu im <code>Scene</code>-Dock mit Rechtsklick auf das Node <code>node2D</code> und w\u00e4hle dort den Eintrag <code>Rename</code> (du kannst auch nach dem Klick auf das Node die Taste F2 dr\u00fccken). Nun kannst du <code>Main</code> eingeben und mit Enter best\u00e4tigen.</p> <p>Klicke nun oben in der Men\u00fcleiste auf <code>Scene</code> und dort auf <code>Save Scene</code> (du kannst auch einfach Strg+S dr\u00fccken).</p> <p></p> <p>Im daraufhin ge\u00f6ffneten Dialog bist du automatisch im Pfad <code>res://</code>. Dies ist dein Ressourcenordner, welcher deinem zuvor gew\u00e4hlten Projektordner entspricht. Aktuell hast du noch keine Szenendateien oder Unterordner in deinem Projekt, deswegen wird dir ein leeres Fenster angezeigt. Am unteren Rand kannst du den vorgeschlagegen Dateinamen <code>main.tscn</code> sehen. Belasse ihn so und dr\u00fccke rechts unten auf <code>Save</code>.</p> <p>Was ist eine tscn-Datei?</p> <p>Szenen werden als sogenannte PackedScene verpackt und dann im Dateisystem als tscn-Datei gespeichert. Dieser Dateityp kann nur mit der Godot Engine ge\u00f6ffnet und bearbeitet werden. (Mir ist zumindest kein anderes Programm bekannt, was das k\u00f6nnte.)</p> <p>Nach dem Speichern siehst du unten links im <code>FileSystem</code>-Dock neben der <code>icon.svg</code>-Datei jetzt deine <code>main.tscn</code>-Datei.</p> <p></p> <p>Klicke nun oben rechts im Godot Editor bei den sogenannten Playtest-Buttons auf \u25b6\ufe0f Play, um das gesamte Projekt zu starten.</p> <p></p> <p>Es wird eine Meldung angezeigt, dass noch keine Hauptszene ausgew\u00e4hlt wurde. Die Hauptszene eines Projekts, wird beim Start als erstes geladen und angezeigt. Klicke hier auf den Button <code>Select current</code>, um die aktuelle <code>Main</code>-Scene auszuw\u00e4hlen.</p> <p></p> <p>Es \u00f6ffnet sich nun ein neues Fenster mit einem grauen Hintergrund. In der Titelleiste sollte der Name deines Projektes stehen und dahinter (DEBUG). Das Fenster kann verkleiner, vergr\u00f6\u00dfert, minimiert und maximiert werden und zeigt aber immer einen grauen Hintergrund. Mehr passiert nicht. Schlie\u00dfe das Fenster mit einem Klick auf das X (du kannst auch die Taste F8 dr\u00fccken).</p> <p></p> <p>Damit hast du einen gro\u00dfen Sprung gemacht! Du hast nicht nur ein eigenes Projekt angelegt und deine erste Szene mit einem ersten Node darin erstellt. Nein, du hast auch noch dein Programm zum ersten Mal gestartet und es wurde ein Fenster angezeigt. Am Ende also so wie bei einem richtigen Spiel!</p>"},{"location":"level1/03_first-code/","title":"Erster Code","text":"<p>Damit mehr passiert, als dass nur ein Fenster angezeigt wird, m\u00fcssen wir der Godot Engine sagen, was sie sonst noch so machen soll. Das machen wir durch Programmcode. Dieser wird in ein sogenanntes Skript geschrieben und dann entsprechend unserer Vorgaben von der Engine ausgef\u00fchrt. Die Godot Engine bietet dazu die sehr einfache Programmiersprache GDScript an.</p> <p>GDScript</p> <p>Die Diskussion, warum man f\u00fcr Godot eine neue Sprache lernen sollte, erspare ich mir hier. Lies dazu am besten einmal in der Dokumentation die Abschnitte zur Design Philosophie oder das Intro zu den verf\u00fcgbaren Skriptsprachen.</p> <p>F\u00fcr alle Neueinsteiger in die Programmierung kann ich GDScript wirklich w\u00e4rmstens empfehlen. Wer zuvor bereits Erfahrung mit Python gesammelt hat, wird sich sofort wohl f\u00fchlen, denn diese beiden Sprachen sind sich sehr \u00e4hnlich.</p> <p>Klicke im <code>Scene</code>-Dock mit der rechten Maustaste auf unser <code>Main</code>-Node und w\u00e4hle <code>Attach Script</code>. </p> <p></p> <p>Es \u00f6ffnet sich ein Dialog zum Erstellen eines Skriptes. Hier kann die Skriptsprache definieren, ein Template (also eine Vorlage) ausw\u00e4hlen und den Pfad zum Abspeichern festlegen. Belasse einfach alle Voreinstellungen so wie sie sind. Im Textfenster am Ende wird angezeigt, was alles eingestellt ist und ob alle Einstellungen okay (= gr\u00fcn) sind. Klicke dann auf <code>Create</code> und das Skript wird als <code>main.gd</code> gespeichert.</p> <p>Was ist eine gd-Datei?</p> <p>GD-Dateien sind einfache Textdateien, welche allerdings f\u00fcr die Godot Engine (und auch andere Editoren) sofort als GDScript-Codedateien erkannt werden.</p> <p></p> <p>Und wieder passt sich der Godot Editor automatisch an und wechelt den Viewport in der Mitte zum Skripteditor. Die aktive Ansicht kannst du oben in der Mitte im Bereich der Men\u00fcleiste jederzeit \u00e4ndern.</p> <p></p> <p>Unser Skript <code>main.gd</code> ist offenbar schon vorausgef\u00fcllt worden. Dies kommt daher, da wir die Einstellung zum Template bei der Skripterstellung belassen haben. Das beschleunigt enorm die Arbeit mit Skripten, denn man kann die voreingstellten Vorlagen der Godot Engine verwenden oder sp\u00e4ter auch eigene Vorlagen hinzuf\u00fcgen.</p> <p>Schau dir die Vorlage einmal kurz an:</p> Template<pre><code>extends Node2D\n# Called when the node enters the scene tree for the first time.\nfunc _ready():\npass # Replace with function body.\n# Called every frame. 'delta' is the elapsed time since the previous frame.\nfunc _process(delta):\npass\n</code></pre> <p>Kurzerkl\u00e4rung zu den Zeilen der Vorlage</p> <p>Hier nur eine grobe \u00dcbersicht \u00fcber die einzelnen Zeilen des Skriptes:</p> <ul> <li><code>extends Node2D</code> ... Das Skript bezieht sich auf ein <code>Node2D</code>-Node und erh\u00e4lt (erbt) damit alle Eigenschaften und Methoden dieser Node.</li> <li><code># Blabla</code> ... Ein Doppeklkreuz/Hashtag <code>#</code> leitet einen Kommentar ein.</li> <li><code>func _ready():</code> ... <code>func</code> leitet eine Funktion ein. Ein Unterstrich <code>_</code> ist die Kennzeichnung f\u00fcr Funktionen, welche von au\u00dfen nicht aufgerufen werden k\u00f6nnen. Die <code>ready()</code>-Funktion ist eine vordefinierte Standardfunktion, welche aufgerufen wird, wenn das Node fertig geladen und bereit zur Anzeige ist. Die Funktion ben\u00f6tigt keine Parameter und hat deshalb leere Klammern <code>()</code>. Eine Funktionsdeklaration endet mit einem Doppelpunkt <code>:</code>.</li> <li><code>pass</code> ... Dies ist eine spezielle GDScript-Funktion die absolut nichts tut. Also wirklich gar nichts. Sie ist ein Platzhalter - in diesem Fall f\u00fcr den Funktionsinhalt.</li> <li><code>func _process(delta):</code> ... Die <code>process()</code>-Funktion ist eine vordefinierte Standardfunktion, welche dauerhaft in jedem Frame aufgerufen wird. Der Parameter <code>delta</code> gibt die Zeit zwischen dem letzten Frame und dem aktuellen Frame wieder und erm\u00f6glicht somit, dass man sich mit geschickter Programmierung von den FPS des Spielers unabh\u00e4ngig machen kann.</li> </ul> <p>Im mittleren Teil findet man die <code>_ready()</code>-Funktion, welche beim Laden des Nodes, somit beim Laden der <code>Main</code>-Szene und somit schlussendlich also beim Starten des Programms aufgerufen wird:</p> Template<pre><code>extends Node2D\n# Called when the node enters the scene tree for the first time.\nfunc _ready():\npass # Replace with function body.\n# Called every frame. 'delta' is the elapsed time since the previous frame.\nfunc _process(delta):\npass\n</code></pre> <p>Dort in Zeile 6 unter <code>func _ready():</code> entfernst du jetzt das <code>pass</code> und dann tippst du mit einem Tab einger\u00fcckt die Zeile <code>print(\"Hello World\")</code> ein. Der Abschnitt sollte also wie folgt aussehen:</p> <pre><code>func _ready():\nprint(\"Hello World\")\n</code></pre> <p>Hier ist zur Kontrolle noch einmal das gesamte Skript:</p> Template<pre><code>extends Node2D\n# Called when the node enters the scene tree for the first time.\nfunc _ready():\nprint(\"Hello World\")\n# Called every frame. 'delta' is the elapsed time since the previous frame.\nfunc _process(delta):\npass\n</code></pre> <p>Klicke in der Men\u00fcleiste des Skripteditors auf <code>File</code> und dann auf <code>Save</code> (oder dr\u00fccke einfach Strg+S). Nun kannst du wieder den Play-Button im Editor klicken (oder du dr\u00fcckst die Taste F5).</p> <p>Es \u00f6ffnet sich erneut das graue Fenster, aber nichts passiert? Nicht ganz! Wechsle mit einem Klick in deiner Taskleiste zur\u00fcck zum Godot Editor, w\u00e4hrend das Programm noch l\u00e4uft (oder dr\u00fccke die Tastenkombination Alt+Tab). Du solltet nun im <code>Debugging</code>-Bereich unterhalb des Skripteditors das Ausgabefenster (<code>Output</code>) sehen. Darin stehen ein paar Zeilen zur Godot Engine, der OpenGL Version und deiner Grafikkarte. Und darunter solltest du nun die Zeile \"Hello World\" entdecken!</p> <p></p> <p>Du hast mit <code>print</code> deinen ersten GDScript-Befehl kennengelernt! Dieser schreibt alles was du willst in die Konsolenausgabe, welche du w\u00e4hrend des Testens deines Spieles beobachten kannst. Das hilft beim Finden von Fehlern oder einfach nur, um zu verstehen, wie etwas funktioniert. Sowas nennt man dann print-Debugging.</p>"},{"location":"level1/04_first-settings/","title":"Erste Einstellungen","text":"<p>Wir gehen noch ein paar Schritte weiter und ver\u00e4ndern unser Projekt noch ein wenig. Zun\u00e4chst </p> <p>Men\u00fc oben</p> <p>Projekteinstellungen</p> <p>Application -&gt; Config     Name</p> <p>Viele Einstellungen</p> <p>Suche eintippen</p> <p>Window -&gt; Strech      Mode -&gt; canvas_items     Aspect -&gt; keep</p>"},{"location":"level1/05_first-gui/","title":"Erste GUI","text":"<p>Wann hast du das letzte Mal ein Spiel ohne Men\u00fc gesehen? Eben! Wir brauchen auch eines. Um solche sogenannten Benutzeroberfl\u00e4chen - oder englisch Graphical User Interface (GUI) - zu bauen, ben\u00f6tigt man die Control-Nodes.</p> <p>Davon gibt es sehr viele. F\u00fcr das Anzeigen von Text gibt es z.B. das Label. Wenn du eine Texteingabe brauchst, kannst du TextEdit verwenden. Oftmals braucht man aber auch einen Knopf zum Dr\u00fccken, also etwas das auf einen Klick (oder eine Toucheingabe) reagiert - dies sind die Buttons.</p> <p>Label hinzuf\u00fcgen</p> <p>Button hinzuf\u00fcgen</p> <p>Play -&gt; Text wird angezeigt, Button kann geklickt werden -&gt; Aber nichts passiert</p> <p>Erweitert &gt;&gt;&gt;...</p> <p>Wie kann man Godot sagen, dass bei einem Klick auf einen Button etwas passieren soll?</p> <p>Ein Klick ist ein sogenanntes Event (englisch Ereignis). Wenn dieses auftritt, k\u00f6nnen wir dem Node sagen, dass es anderen Nodes Bescheid geben soll. Das Node sendet dann ein Signal aus, dass alle empfangen k\u00f6nnen, die darauf lauschen. Man k\u00f6nnte auch sagen, es ruft: \"Hey ihr da drau\u00dfen - ich wurde geklickt!\"</p> <ul> <li>Signal</li> </ul> <p>print(\"Button wurde geklickt!\")</p>"},{"location":"level1/06_first-image/","title":"Erstes Bild","text":"<p>Ohne Bilder, Farben und Formen w\u00e4re ein Spiel ziemlich langweilig. Lass uns deshalb mal ein Bild in unser Spiel einf\u00fcgen. F\u00fcr diese Aufgabe eignet sich am besten das Sprite Node. In dieses l\u00e4sst sich ein Bild vom Computer als sogenannte Textur einf\u00fcgen und es wird im Spiel angezeigt.</p> <p>Godot Icon verwenden</p> <p>Bild einfach reinziehen und irgendwo hin schieben</p> <p>Tools im 2D Viewport zum Verschieben und Drehen und Snapping</p>"},{"location":"level1/07_first-input/","title":"Erste Steuerung","text":"<p>Eingabe der Pfeiltasten soll Bild bewegen</p> <p>Koordinatensystem xy</p> <p>Position des Bildes laut Nodeeigenschaften</p> <p>Nach links/rechts verschieben --&gt; x-Wert \u00e4ndert sich Nach oben/unten verschieben --&gt; y-Wert \u00e4ndert sich</p> <p>Zur\u00fcck zum Code</p> <p>func _input(event):     if event.is_action(\"ui_right\"):         image.position.x += 1     elif event.is_action(\"ui_left\"):         image.position.x -= 1</p> <p>etc.</p> <p>Level 1: Complete</p> <p>Du hast es geschafft, auf zu Level 2!</p>"},{"location":"level2/","title":"Ein Spiel entwickeln","text":""},{"location":"level2/#wie-wird-man-eigentlich-spielentwickler","title":"Wie wird man eigentlich Spielentwickler?","text":"<p>Kommt drauf an, wo man die Grenze zieht, was ein \"Spielentwickler\" (aka Game developer) macht und was nicht. Vorweg: Ich arbeite nicht in der Spielindustrie - meine Antworten sollte man also mit Vorsicht genie\u00dfen.</p> <p>Wenn man ein Spielentwickler ist, sobald man ein Spiel auf einer Plattform ver\u00f6ffentlicht hat, dann ist es heutzutage kein allzu gro\u00dfes Problem mehr: Man nehme ein Standardtemplate (eine Vorlage mit fertigen Funktionen und Abl\u00e4ufen), f\u00fcge im Spielmen\u00fc den eigenen Spielnamen ein, baue ein paar eigene Assets ein (Bilder, Sounds) und f\u00fcge hier und da noch etwas Code hinzu (Einbindung des eigenen Discord-Servers). Dann erstellt man einen Account bei itch.io und l\u00e4dt sein Spiel hoch. Schon ist man Spieleentwickler.</p> <p>Das w\u00e4re nat\u00fcrlich eine ganz sch\u00f6n unsinnige Definition - aber vielleicht konnte man schon sehen, wohin meine Antwort abzielt. Im industriellen Umfeld der gro\u00dfen Publisher ist es n\u00e4mlich so, dass man als Team gemeinsam an einem solchen Projekt arbeitet. Jeder erf\u00fcllt in so einem Team eine spezifische Aufgabe. Es gibt Gamedesigner, die ein Konzept erstellen, sich Quests ausdenken und passende Dialoge verfassen und es gibt Programmierer, die das ganze in Code gie\u00dfen und somit spielbar machen. Dann gibt es aber auch Leute, die sich um Sachen wie die Benuteroberfl\u00e4chen, das Installationssetup oder die Webseite und das Marketing f\u00fcr das Spiel k\u00fcmmern. Und oft untersch\u00e4tzt wird die Arbeit der vielen Grafiker und Sounddesigner, die hunderte und tausende Assets erstellen, um dem Spiel Leben einzuhauchen. Jeder ist Teil der Spielentwicklung auf seine ganz eigene Art und Weise. Man kann also Spielentwickler werden, wenn man in einem dieser Bereiche viel Wissen angesammelt hat (bspw. durch eine Ausbildung oder ein Studium) und sich dann f\u00fcr ein solches Team bei einem Publisher bewirbt.</p> <p>Im Kontrast dazu gibt es aber auch Leute, die ein Spiel in einem kleinen Studio, mit einem kleinen Team oder sogar alleine - ohne Publisher - entwickeln. Das bezeichnet man in der Regel als \"Indie\" (von independend als unabh\u00e4ngig). Hier werden die Aufgaben nicht so stark verteilt, sondern es arbeiten alle gleicherma\u00dfen an den Bausteinen des Spiels. Dazu muss man nat\u00fcrlich eine Menge wissen - und das gleich zu allen Bereichen, die f\u00fcr ein Spiel wichtig sind. Das kann ganz sch\u00f6n schwierig sein, aber solange man nicht das n\u00e4chste gro\u00dfe AAA Spiel geplant hat, ist auch das schaffbar. Auch hier kommt das ganze Wissen und die Erfahrung ja nicht \u00fcber Nacht, sondern wird \u00fcber viele Jahre durch eine entsprechende Ausbildung, ein Studium, einen Job oder auch Do-It-Yourself beim Hobbybasteln am heimischen Computer angesammelt.</p> <p>Wer ernsthaft mit dem Gedanken spielt, in diese Richtung zu gehen, wird auf diesen Seiten sicher f\u00fcndig:</p> <ul> <li>Wikipedia - Spieleentwickler</li> <li>Ausbildung.de - Game Programmer</li> <li>Ausbildung.de - Game Artist</li> <li>Get-In-IT.de - Was macht ein Spieleentwickler</li> <li>Studycheck - Gamedesigner</li> <li>Uniturm - Spieleentwicklung studieren</li> <li>Medienstudienf\u00fchrer.de - Game Design</li> </ul>"},{"location":"level2/#schwiergikeit","title":"Schwiergikeit","text":"<p>Schwierigkeit &lt;--&gt; Zeit &lt;--&gt; Geld</p>"},{"location":"level2/#ideen","title":"Ideen","text":"<ul> <li>Ideen haben</li> <li>Aufschreiben (so genau wie m\u00f6glich)</li> <li>Anregungen durch Spielen holen (Notizen machen, versuchen zu verstehen wieso etwas gemacht wurde)</li> </ul>"},{"location":"level2/#wissen","title":"Wissen","text":"<ul> <li>Ohne Englisch geht es nicht</li> <li>Viele Themen aus dem Informatikbereich (Algorithmen, Datenstrukturen) und der Mathematik (Vektoren, Matrizen)</li> <li>Programmieren nicht immer n\u00f6tig, aber stets sehr hilfreich</li> <li>Bei komplexen Sachen geht es ohne Programmierung nicht</li> <li>Videos und Tutorials angucken</li> <li>Aber vor allem auch: B\u00fccher lesen!<ul> <li>Beispiele</li> </ul> </li> </ul>"},{"location":"level2/#wie-anfangen","title":"Wie anfangen?","text":"<ul> <li>Klein</li> <li>Viele kleine Prototypen (kein Overoptimization)</li> <li>Keine gro\u00dfen Traumprojekte sofort anfangen</li> <li>Bestimmte Themen erstmal weglassen (bspw. 3D Grafik, KI bei Gegnern, Multiplayer \u00fcber das Internet, Ver\u00f6ffentlichung bei Steam...)</li> <li>Bei GameJams mitmachen</li> <li>Am besten Gleichgesinnte suchen und gemeinsam an Ideen basteln</li> </ul>"},{"location":"level2/#spa-haben","title":"Spa\u00df haben","text":"<ul> <li>Motivation ist alles</li> <li>Auch mal Spa\u00df daran haben, im Spiel etwas kaputt zu programmieren</li> <li>Zwischendurch immer eine Pause einlegen</li> </ul> <p>Level 2: Complete</p> <p>Du hast es geschafft, auf zu Level 3!</p>"},{"location":"level3/","title":"Level 3","text":"<p>:)</p>"},{"location":"level3/01_gameidea/","title":"Spielidee","text":"<p>Platformer Beat-em up</p> <ul> <li>Spielvarianten / Templates</li> <li>Skizzen erstellen</li> <li>Ideen sammeln</li> </ul>"},{"location":"level3/02_assets/","title":"Assets","text":"<p>Am besten l\u00e4dst du dir jetzt dieses Asset-Pack herunter und entpackst es in einen beliebigen Ordner. Assets sind Materialien, welche in einem Spiel eingesetzt werden. Dazu z\u00e4hlen Bilder, Soundeffekte oder auch Schriftarten. Dieses Asset-Pack enth\u00e4lt mehrere Dateien, welche wir im Workshop verwenden werden und welche du anschlie\u00dfend f\u00fcr eigene Spiele benutzen kannst. Alle Materialien stehen unter der offenen CC0-Lizenz (nennt man auch Public Domain) und d\u00fcrfen deshalb frei und kostenlos f\u00fcr alle Projekte verwendet werden.</p> <ul> <li>Was sind Assets</li> <li>Wo bekommt man die her</li> <li>Welche Tools kann man nutzen</li> </ul>"},{"location":"level3/03_world/","title":"Spielwelt","text":""},{"location":"level3/04_settings/","title":"Einstellungen","text":"<p>Config -&gt; Name</p> <p>Windows size</p> <p>Stretch Viewport</p> <p>Play -&gt; \u00c4nderungen angucken</p>"},{"location":"level3/05_character/","title":"Spielfigur","text":"<ul> <li>Bild einf\u00fcgen</li> <li>Code zur Bewegung</li> </ul>"},{"location":"level3/06_map/","title":"Karte","text":"<p>...</p>"},{"location":"level3/07_enemy/","title":"Gegner","text":"<p>...</p>"},{"location":"level3/08_gamelogic/","title":"Spiellogik","text":"<p>Level 3: Complete</p> <p>Du hast es geschafft, auf zu Level 4!</p>"},{"location":"level4/editor/","title":"Der Editor","text":"<p>Baustelle</p> <p>Sorry, ab hier fehlt noch einiges. Ich arbeite daran \u26cf</p> <p>Nun wollen wir den Editor kennenlernen. Dazu schauen wir uns einfach die Programmoberfl\u00e4che etwas genauer an.</p>"},{"location":"level4/editor/#aufbau-des-editors","title":"Aufbau des Editors","text":"<p>Der Editor ist in verschiedene Bereiche eingeteilt:</p> <p></p>"},{"location":"level4/editor/#hauptmenu","title":"Hauptmen\u00fc","text":"<p>Szene</p> <ul> <li>Alles basiert auf Szenen (engl. Scenes)</li> <li>Speichern und \u00d6ffnen von Szenen</li> <li>Godot beenden</li> </ul> <p>Projekt</p> <ul> <li>Projekteinstellungen<ul> <li>Anzeigename</li> <li>Aufl\u00f6sung</li> <li>Eingabeeinstellungen</li> <li>Titelbildschirm</li> </ul> </li> <li>Exportieren</li> <li>Zur Projektverwaltung zur\u00fcckkehren</li> </ul> <p>Debuggen</p> <ul> <li>Collisionshapes sichtbar machen (Physik)</li> <li>Szenen- und Skript\u00e4nderungen synchronisieren</li> </ul> <p>Editor</p> <ul> <li>Editoreinstellungen</li> <li>Editorlayout</li> <li>Vollbildmodus</li> <li>Exportvorlagen</li> </ul> <p>Hilfe</p> <ul> <li>Suche</li> <li>Dokumentation</li> <li>\u00dcber</li> </ul>"},{"location":"level4/editor/#arbeitsbereiche","title":"Arbeitsbereiche","text":"<p>Englisch \"Workspaces\" \u00c4nderung des sogenannten Viewports darunter</p> <p>2D/3D</p> <ul> <li>Viewport</li> <li>Mit vielen zus\u00e4tzlichen Funktionen</li> </ul> <p>Script</p> <ul> <li>Skriptliste</li> <li>Syntax-Hervorhebung</li> <li>Dokumentation im Editor</li> </ul> <p>AssetLib</p> <ul> <li>Direkte Suche von Vorlagen, Materialien und Plugins im Web</li> <li>Herunterladen, installieren und nutzen</li> </ul>"},{"location":"level4/editor/#steuerung","title":"Steuerung","text":"<ul> <li>Play<ul> <li>Testen auf dem Ger\u00e4t</li> <li>Auch ein direkter Test auf dem Smartphone oder im Webbrowser m\u00f6glich</li> </ul> </li> <li>Pause<ul> <li>Fern-Betrachtung von Nodes im Szenendock</li> </ul> </li> <li>Szene abspielen<ul> <li>Nur die Szene, nicht das ganze Spiel</li> </ul> </li> </ul>"},{"location":"level4/editor/#szenendock","title":"Szenendock","text":"<ul> <li>Root = Wurzel-Node</li> <li>Parent = Eltern-Node</li> <li>Child = Kinder-Node</li> <li>Verstecken (Auge)</li> <li>Skript (Schriftrolle)</li> </ul>"},{"location":"level4/editor/#dateisystem","title":"Dateisystem","text":"<ul> <li>res = Resources</li> <li>Rechtsklick \"Im Dateimanager \u00f6ffnen\"</li> </ul>"},{"location":"level4/editor/#inspektor","title":"Inspektor","text":"<ul> <li>Eingenschaften</li> <li>Signale</li> </ul>"},{"location":"level4/editor/#bottom-panel","title":"Bottom Panel","text":"<ul> <li>Ausgabe<ul> <li>Print</li> </ul> </li> <li>Debugger<ul> <li>Warnungen (Warning) und Fehler (Error)</li> </ul> </li> <li>Audio, Animationen, Tilemaps...</li> </ul> <p>Level 4: Complete</p> <p>Du hast es geschafft, auf zu Level 5!</p>"},{"location":"level5/01_gui-menu/","title":"Men\u00fc","text":"<p>...</p>"},{"location":"level5/02_animations/","title":"Animationen","text":"<p>...</p>"},{"location":"level5/03_soundeffects/","title":"Soundeffekte","text":"<p>...</p>"},{"location":"level5/04_shader/","title":"Shader","text":"<p>...</p>"},{"location":"level5/05_couch-coop/","title":"Couch Coop","text":"<p>...</p>"},{"location":"level5/06_save-load/","title":"Speichern und Laden","text":"<p>...</p>"},{"location":"level5/07_enemy-ai/","title":"Gegner KI","text":"<p>...</p>"},{"location":"level5/08_export/","title":"Export","text":"<p>...</p> <p>Level 5: Complete</p> <p>Du hast es geschafft, auf zu den Extraleveln!</p>"},{"location":"topics/","title":"Weitere Themen in der \u00dcbersicht","text":"<p>Im Rahmen des Workshops werden wir nicht allzu viel schaffen. Da ich aber wei\u00df, dass du neugierig bist, auf die vielen M\u00f6glichkeiten, die dir Godot bietet, m\u00f6chte ich dir noch ein paar Themen vorstellen, mit denen du dich besch\u00e4ftigen kannst. Vielleicht ist auch ein Thema dabei, dass dich besonders interessiert. Schau dir am besten alle Links an, die du dort findest - denn nur mit viel Lesen und dem Anschauen unz\u00e4hliger Videos wirst du irgendwann richtig gut und wei\u00dft, was du wie umsetzen kannst.</p> <p>Jedes Thema ist untergliedert nach folgenden Punkten:</p> <ol> <li>Worum geht es?</li> <li>Allgemeine Einsch\u00e4tzung</li> <li>Wof\u00fcr kann man das gebrauchen</li> <li>Schwierigkeitsgrad der Umsetzung</li> <li>Kurzanleitung</li> <li>Links</li> </ol> <p>Ich hoffe, dass dir das etwas weiter hilft, wenn du dich selbstst\u00e4ndig mit Godot besch\u00e4ftigst. Ansonsten empfehle ich dir die Godot Dokumentation. Dort findest du n\u00e4mlich auch viele Themen einzeln im Detail erkl\u00e4rt.</p>"},{"location":"topics/2d/","title":"2D Grafik","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Anf\u00e4nger Doku: Godot Dokumentation - Tutorials - 2D</p>"},{"location":"topics/3d/","title":"3D Grafik","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Fortgeschritten bis Experte Doku: Godot Dokumentation - Tutorials - 3D</p> <p>Guter Quickstart: https://www.youtube.com/watch?v=z_vI3WoAHGY</p>"},{"location":"topics/ai/","title":"K\u00fcnstliche Intelligenz (KI/AI)","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Experte Doku: xxx</p>"},{"location":"topics/animation/","title":"Animationen","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Anf\u00e4nger Doku: Godot Dokumentation - Tutorials - Animation</p>"},{"location":"topics/assets/","title":"Asset Library","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Anf\u00e4nger bis Fortgeschritten Doku: Godot Asset Library, Godot Dokumentation - Tutorials - Plugins</p>"},{"location":"topics/debugging/","title":"Fehlerbehebung (Debugging)","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Anf\u00e4nger bis Fortgeschritten Doku: xxx</p>"},{"location":"topics/export/","title":"Export","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Fortgeschritten Doku: Godot Dokumentation - Workflow - Export</p>"},{"location":"topics/gui/","title":"Grafische Benutzeroberfl\u00e4chen (GUI)","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Anf\u00e4nger bis Fortgeschritten Doku: Godot Dokumentation - Tutorials - GUI</p>"},{"location":"topics/input/","title":"Eingabe (Input)","text":"<p>Zusammenfassung</p> <p>Ziel: Eingaben von Maus, Tastatur, Controller, Joysticks und Touchscreens zur Steuerung verwenden, Controllervibration als Feedback einsetzen Level: Anf\u00e4nger (Fortgeschritten: Multitouchgesten) Doku: Godot Dokumentation - Tutorials - Inputs</p>"},{"location":"topics/io/","title":"Speichern und Laden (IO)","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Anf\u00e4nger bis Fortgeschritten Doku: Godot Dokumentation - Tutorials - IO</p>"},{"location":"topics/networking/","title":"Multiplayer","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Experte Doku: Godot Dokumentation - Tutorials - Networking</p>"},{"location":"topics/physics/","title":"Physik","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Fortgeschritten Doku: Godot Dokumentation - Tutorials - Physik</p>"},{"location":"topics/shader/","title":"Shader","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Fortgeschritten bis Experte Doku: xxx</p>"},{"location":"topics/sound/","title":"Sound","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Anf\u00e4nger Doku: Godot Dokumentation - Tutorials - Audio</p>"},{"location":"topics/xr/","title":"Virtual Reality","text":"<p>Zusammenfassung</p> <p>Ziel: xxx Level: Experte Doku: Godot Dokumentation - Tutorials - VR</p>"}]}